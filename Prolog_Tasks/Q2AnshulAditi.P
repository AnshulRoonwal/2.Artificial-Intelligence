%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% Read_ME
%%%%%%%%%% Change the input at input/1 predicate and run test(_) in 
%%%%%%%%%% terminal to execute the program.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

puzzle(P,Board,K) :-
    write('Size of board '), write(K), write('x'), write(K), nl,
    Board = [[A1,A2,A3],[B1,B2,B3],[C1,C2,C3]],
    vertically_adjacent(A1,B1),    vertically_adjacent(A2,B2),    vertically_adjacent(A3,B3),
    vertically_adjacent(B1,C1),    vertically_adjacent(B2,C2),    vertically_adjacent(B3,C3),
    horizontally_adjacent(A1,A2),  horizontally_adjacent(B1,B2),  horizontally_adjacent(C1,C2),
    horizontally_adjacent(A2,A3),  horizontally_adjacent(B2,B3),  horizontally_adjacent(C2,C3),
    bindBoard(board_piece(Board), P).

bindBoard(_Cont_1, []).
bindBoard(Cont_1, [E1|E1s]) :-
   call(Cont_1, E1),
   bindBoard(Cont_1, E1s).
%call(plus(1), 2, X) will call plus(1, 2, X), binding X to 3.

%Check if they are opposite in signs
isOpposite(X,Y):-
    not(X == Y).

%Check if they are vertically adjacent ie; first is top on other
vertically_adjacent([_,_,X,_], [Y,_,_,_]) :-
    isOpposite(X,Y).

%Check if they are horizontally adjacent ie; first is left to other
horizontally_adjacent([_,X,_,_], [_,_,_,Y]) :-
    isOpposite(X,Y).


board_piece(Board, Piece) :-
    member(Row, Board),
    member(Piece0, Row),
    rotateBoard(Piece0, Piece).

%Implemented memebr/2 from library apply
member(Elem, [Elem|_]).
member(Elem, [_|Rest]):-
    member(Elem,Rest). 	

%rotate the board to see the fit.
rotateBoard([A,B,C,D], [B,C,D,A]).


%Calls the print row method that prints the first row, second row and so on.
print_result([]).
print_result([H|T]):-
    print_row(H),
    write('\n'),
    print_result(T).

%Prints the row and encloses one cell into [ ]
print_row([]).
print_row(Row):-
    Row=[H|T],
    write('['),
    print_element(H),
    write(']'),
    print_row(T).

%Used to print the elements of the list one by one.
print_element([]).
print_element([H|T]):-
    write(H),
    write(','),
    print_element(T).


%Used to print the length of the list.
length1([], 0).
length1([_|Xs], M):-
    length1(Xs, N),
    M is N+1.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% TEST 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%This is the method we call first. 
test(_):-
    get_input(I),
    puzzle(I,P, 3),
    print_result(P).

get_input(P):-
    input(P).

%This is the current board configuration
input(P) :-
    P = [[-2,3,4,-1], [1,4,-3,-4], [-3,2,4,-4],
          [-4,-3,4,2], [2,-3,-1,4], [-1,-4,3,2],
          [-2,3,2,-1], [-1,-3,1,2], [-2,1,4,-3]].

%%%%%%%%%%%%%%%%%%%
%%%% Reference-
%%%% For maplist code - http://www.complang.tuwien.ac.at/ulrich/iso-prolog/prologue#maplist
%%%% For call/2 - http://www.swi-prolog.org/pldoc/man?predicate=call/2
%%%% Idea - https://groups.google.com/forum/#!topic/swi-prolog/Vz_4xpEHY3w
%%%% prolog online - http://swish.swi-prolog.org/
%%%% Logic - http://stackoverflow.com/questions/26856973/board-assembly-with-constraints
%%%% Prolog Intro - https://en.wikipedia.org/wiki/Prolog
%%%% member definition - http://www.swi-prolog.org/pldoc/man?predicate=member/2
%%%%%%%%%%%%%%%%%%%

